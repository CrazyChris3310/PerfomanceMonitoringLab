<?xml version="1.0" encoding="UTF-8" ?>
<project name="JSFLab" default="compile" xmlns:ivy="antlib:org.apache.ivy.ant" basedir=".">

    <property file="build.properties.prod" />

     <property name="ivy.install.version" value="2.1.0-rc2"/>
    <condition property="ivy.home" value="${env.IVY_HOME}">
      <isset property="env.IVY_HOME"/>
    </condition>
    <property name="ivy.home" value="${user.home}/.ant"/>
    <property name="ivy.jar.dir" value="${ivy.home}/lib"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>

    <target name="download-ivy" unless="offline">

        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
      <!-- try to load Ivy here from Ivy home, in case the user has not already dropped
              it into Ant's lib dir (note that the latter copy will always take precedence).
              We will not fail as long as local lib dir exists (it may be empty) and
              Ivy is in at least one of Ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>

        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <path id="classpath">
        <fileset dir="${basedir}/">
            <include name="lib/*.jar" />
        </fileset>
    </path>

    <target name="compile" depends="clean">
        <mkdir dir="${build.dir}/classes" />
        <javac srcdir="${source.dir}/java"  includeantruntime="false" 
            destdir="${build.dir}/classes" classpathref="classpath">
        </javac>
    </target>

    <target name="resolve" description="resolve dependencies">
      <ivy:resolve />
   </target>

   <target name="retrieve">
    <ivy:retrieve />
   </target>

    <target name="build" depends="compile, fun">
        <jar destfile="${build.dir}/${jar.name}.jar" basedir="${build.dir}/classes">
            <fileset dir="${basedir}/">
                <include name="lib/*.jar"/>
            </fileset>
            <fileset dir="${source.dir}">
                <exclude name="java/**" />
            </fileset>
            <manifest>
                <attribute name="Main-Class" value="${main.class}" />
            </manifest>
        </jar>
    </target>

    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>

    <target name="doc" depends="build">
        <javadoc sourcepath="${source.dir}/java" classpathref="classpath" destdir="${build.dir}/javadoc" />
        <zip destfile="${build.dir}/${jar.name}.jar" update="true" basedir="${build.dir}" includes="javadoc/*" />
        <signjar jar="${build.dir}/${jar.name}.jar" alias="${keystore.alias}" storepass="${storepass}" 
        keystore="${keystore.path}" digestalg="SHA-1" />
        <signjar jar="${build.dir}/${jar.name}.jar" alias="${keystore.alias}" storepass="${storepass}" 
        keystore="${keystore.path}" digestalg="MD5" />
    </target>

    <target name="fun" if="fun" unless="fun.done">
        <sound>
            <success source="${music.success}"/>
            <fail source="${music.failure}"/>
        </sound>
        <property name="fun.done" value="true"/>
    </target>

    <target name="compile-tests" depends="build">
        <mkdir dir="${build.dir}/tests" />
        <javac srcdir="${test.dir}/java"  includeantruntime="false" 
            destdir="${build.dir}/tests">
            <classpath>
                <pathelement location="${build.dir}/${jar.name}.jar"/>
                <path refid="classpath" />
            </classpath>
        </javac>
    </target>

    <target name="test" depends="compile-tests">
        <mkdir dir="${build.dir}/reports" />
        <junitlauncher>

            <classpath refid="classpath" />
            <classpath>
                <pathelement location="${build.dir}/tests"/>
                <pathelement location="${build.dir}/${jar.name}.jar" />
            </classpath>
    
            <testclasses outputDir="${build.dir}/reports">
                <fileset dir="${build.dir}/tests"/>
                <listener type="legacy-plain" sendSysOut="true" />
            </testclasses>
        </junitlauncher>
    </target>

    <target name="alt">
        <delete dir="${alt.source.dir}" />
        <mkdir dir="${alt.source.dir}" />
        <copy todir="${alt.source.dir}/java">
            <fileset dir="${source.dir}/java" />
            <globmapper from="*.java" to="*Alt.java"/>
        </copy>

        <replace dir="${alt.source.dir}/java" token="Main" value="MainAlt" />
        <replace dir="${alt.source.dir}/java" token="PointDataDAO" value="PointDataDAOAlt" />
        <replace dir="${alt.source.dir}/java" token="TimeBean" value="TimeBeanAlt" />
        <replace dir="${alt.source.dir}/java" token="XCordValidator" value="XCordValidatorAlt" />
        <replace dir="${alt.source.dir}/java" token="YCordValidator" value="YCordValidatorAlt" />
        <replace dir="${alt.source.dir}/java" token="DataBaseConnection" value="DataBaseConnectionAlt" />
        <replaceregexp match="(\W)PointData(\W)" replace="\1PointDataAlt\2" flags="g">
            <fileset dir="${alt.source.dir}/java"/>
        </replaceregexp>

        <replaceregexp match="(\W)r(\W)" replace="\1radius\2" flags="g" >
            <fileset dir="${alt.source.dir}/java"/>
        </replaceregexp>

        <replaceregexp match="(\W)odt(\W)" replace="\1offsetDateTime\2" flags="g" >
            <fileset dir="${alt.source.dir}/java"/>
        </replaceregexp>

        <antcall target="build">
            <param name="source.dir" value="${alt.source.dir}" />
            <param name="jar.name" value="${jar.name}Alt" />
            <param name="main.class" value="${main.class}Alt" />
            <param name="build.dir" value="${build.dir}/alt" />
        </antcall>

    </target>

</project>